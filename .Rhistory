install.packages("tinytex")
tinytex::install_tinytex()
install.packages("swirl")
ls
library("swirl")
swirl()
5+7
swirl()
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
a <- 1:5
a
mean(a)
clear
clear all
seq(from = 0, to = 100, by = 2)
seq(from = 0, to = 100, by = 2)
+
9
install.packages("yarrr")
library("yarrr")
pirateplot(formula = weight ~ Time,)
pirateplot(formula = weight ~ Time, data = ChickWeight, pal = "xmen")
?pirates
head(pirates)
names(pirates)
View(pirates)
mean(pirates$age)
max(pirate$height)
max(pirates$height)
table(pirates$sex)
aggregate(formula = age ~ sex, data = pirates, FUN = mean)
aggregate(formula = age ~ sex, data = pirates, FUN = mean)
aggregate(x = age ~ sex, data = pirates, FUN = mean)
plot(x = pirates$height, y = pirates$weight)
plot(x = pirates$height,        # X coordinates
y = pirates$weight,        # y-coordinates
main = 'My first scatterplot of pirate data!',
xlab = 'Height (in cm)',   # x-axis label
ylab = 'Weight (in kg)',   # y-axis label
pch = 16,                  # Filled circles
col = gray(.0, .1))        # Transparent gray
# Create scatterplot
plot(x = pirates$height,        # X coordinates
y = pirates$weight,        # y-coordinates
main = 'My first scatterplot of pirate data!',
xlab = 'Height (in cm)',   # x-axis label
ylab = 'Weight (in kg)',   # y-axis label
pch = 16,                  # Filled circles
col = gray(.0, .1))        # Transparent gray
grid()        # Add gridlines
# Create a linear regression model
model <- lm(formula = weight ~ height,
data = pirates)
abline(model, col = 'blue')      # Add regression to plot
pirateplot(formula = age ~ sword.type,
data = pirates,
main = "Pirateplot of ages by favorite sword")
pirateplot(formula = height ~ sex,
data = pirates,
main = "Pirateplot of height by sex",
pal = "pony",
theme = 3)
piratepal(palette = "pony",
plot.result = TRUE,
trans = .1)
t.test(formula = age ~ headband,
data = pirates,
alternative = 'two.sided')
cor.test(formula = ~ height + weight,
data = pirates)
tat.sword.lm <- lm(formula = tattoos ~ sword.type,
data = pirates)
anova(tat.sword.lm)
tchests.model <- lm(formula = tchests ~ age + weight + tattoos,
data = pirates)
summary(tchests.model)
install.packages('BayesFactor')
install.packages('BayesFactor')
install.packages("BayesFactor")
library(BayesFactor)
ttestBF(formula = age ~ headband, data = pirates)
library(yarrr)
ttestBF(formula = age ~ headband, data = pirates)
this.1 <- 5
ThIS.....ON...E <- 6
This!On!e <- 7
a <- 10
a + 10
a
pnorm(80, mean=100, sd=16)
pnorm(120, mean=100, sd=16)
qnorm(96, mean=100, sd=16)
qnorm(96, mean=100, sd=16, lower.tail=TRUE, log.p=FALSE)
dnorm(06, mean=100, sd=06)
dnorm(06, mean=100, sd=16)
dnorm(96, mean=100, sd=16)
qnorm(96, mean=100, sd=16)
qnorm(.96, mean=100, sd=16)
clear
pnorm(32, mean=29.6, sd.1.54)
pnorm(32, mean=29.6, sd=1.54)
pnorm(32, mean=29.6, sd=1.24)
pnorm(47000, mean=50000, sd=3000)
sqrt(1)
pnorm(24, mean=100/6, sd=sqrt(500/36))
pbinom(3, size=100, p=1/36)
pbinom(24, size=100, p=1/6)
read.csv("/Users/Victor.J/Downloads/caschool.csv")
load("~/Downloads/caschool.csv")
clear()
clean
clear
file_path <- "/Users/Victor.J/Downloads/caschool.csv"
data <- read.csv(file_path)
print(data)
num_columns = ncol(data)
income = avginc * 1000
income = data.avginc
avginc = data[, avginc]
avginc = data$avginc
income = avginc * 1000
print(income)
mean_income = mean(income)
std_income = std(income)
std_income = sd(income)
mean_avginc = mean(avginc)
std_avginc = sd(avginc)
print(data)
mean_math_score = mean(data$math_scr)
avg_class_size = data$enrl_tot / data$teachers
num_class_size_fewer_than_20 = avg_class_size <= 20
num_class_size_more_than_20 = avg_class_size > 20
num_class_size_fewer_than_20 = count(avg_class_size <= 20)
num_class_size_fewer_than_20 = subset(avg_class_size, avg_class_size <= 20)
num_class_size_more_than_20 = subset(avg_class_size, avg_class_size > 20)
mean(num_class_size_fewer_than_20)
num_class_size_fewer_than_20_math_score = subset(math_scr, avg_class_size <= 20)
num_class_size_fewer_than_20_math_score = subset(data$math_scr, avg_class_size <= 20)
num_class_size_more_than_20_math_score = subset(data$math_scr, avg_class_size > 20)
print(mean(num_class_size_fewer_than_20_math_score))
print(mean(num_class_size_more_than_20_math_score))
print(sd(num_class_size_fewer_than_20_math_score))
print(sd(num_class_size_more_than_20_math_score))
print(cov(data$avginc, data$math_scr))
print(cov(data$income, data$math_scr))
print(cov(income, data$math_scr))
print(cor(data$avginc, data$math_scr))
print(cor(income, data$math_scr))
ggplot() +
geom_smooth(data = pre_neigh_data, aes(x = distance, y = lpricesqft), method = "loess") +
geom_smooth(data = post_neigh_data, aes(x = distance, y = lpricesqft), method = "loess") +
xlim(0, 2000) +
facet_wrap(~ neighborhood) +
theme_minimal()
install(ggplot)
install.packages(ggplot)
install.packages(ggplot2)
install.packages("ggplot=")
install.packages("ggplot")
install.packages("ggplot2")
install.packages("ggplot2")
ggplot() +
geom_smooth(data = pre_neigh_data, aes(x = distance, y = lpricesqft), method = "loess") +
geom_smooth(data = post_neigh_data, aes(x = distance, y = lpricesqft), method = "loess") +
xlim(0, 2000) +
facet_wrap(~ neighborhood) +
theme_minimal()
plots <- lapply(neighborhoods, function(neighborhood) {
pre_neigh_data <- filter(pre_data, neighborhood == neighborhood)
post_neigh_data <- filter(post_data, neighborhood == neighborhood)
ggplot() +
geom_smooth(data = pre_neigh_data, aes(x = distance, y = lpricesqft), method = "loess") +
geom_smooth(data = post_neigh_data, aes(x = distance, y = lpricesqft), method = "loess") +
xlim(0, 2000) +
facet_wrap(~ neighborhood) +
theme_minimal()
})
# Initialize a vector to store the minimum distance for each property
min_distances <- numeric(nrow(properties))
funding_centers <- read.csv('data_fundingcenters.csv')
# Calculate distances
pre_data$distance <- calculate_distance(pre_data, funding_centers)
# Calculate distances
pre_data$distance <- calculate_distance(pre_data, funding_centers)
# Calculate distances
pre_data$distance <- calculate_distance(pre_data, funding_centers)
calculate_distance <- function(properties, centers) {
# Initialize a vector to store the minimum distance for each property
min_distances <- numeric(nrow(properties))
# Iterate through each property
for (i in 1:nrow(properties)) {
# Calculate the distance from the property to each funding center
distances <- sqrt((properties$geo_x[i] - centers$geo_x)^2 + (properties$geo_y[i] - centers$geo_y)^2)
# Find the minimum distance and store it
min_distances[i] <- min(distances)
}
return(min_distances)
}
# Filter out the data for each neighborhood and create plots
neighborhoods <- unique(pre_data$neighborhood)
View(calculate_distance)
plots
post_neigh_data <- filter(post_data, neighborhood == neighborhood)
pre_data <- read.csv('data_pre.csv')
pre_data <- read.csv('data_pre.csv')
pre_data <- read.csv('data_pre.csv')
pre_data
pre_data <- read.csv('data_pre.csv')
pre_data <- read.csv('./data_pre.csv')
# set directories
main_dir = "/Users/Victor.J/Downloads/Central Bank Hawkishness"
# set directories
main_dir = "/Users/Victor.J/Downloads/Central Bank Hawkishness/"
data_folder = paste0(main_dir,"Data/")
do_folder = paste0(main_dir,"Do/")
results_folder = paste0(main_dir,"Results/")
charts_folder = paste0(main_dir,"Charts/")
# install and load packages
library(tidyverse)
library(ggplot2)
library(readxl)
library(lubridate) #time and date manipulation
library(ggrepel) # chart labels
library(Rcpp)
library(BISdata) #BIS API KEY
source(paste0(do_folder,"Mode1.R"))
# Get list  of countries needed
countries = c("Brazil","China","Chile","Colombia","Czech Republic","Hungary","Indonesia",
"India","Israel","Korea","Malaysia","Mexico","Philippines","Poland","Romania","South Korea",
"Russia","South Africa","Singapore","Taiwan","Thailand","Turkey","Hong Kong")
full_countries = c("Brazil","China","Chile","Colombia","Czech Republic","Hungary","Indonesia",
"India","Israel","Korea","Malaysia","Mexico","Philippines","Poland","Romania","South Korea",
"Russia","South Africa","Singapore","Taiwan","Thailand","Turkey","Hong Kong","Argentina","Peru","Croatia","Saudi Arabia","Serbia","North Macedonia") # What Steve thinks an EME is
emes = c("Brazil","China","Chile","Colombia","Hungary","Indonesia",
"India","Malaysia","Mexico","Philippines","Poland","Romania",
"Russia","South Africa","Thailand","Turkey","Argentina","Peru","Croatia","Saudi Arabia","Serbia","North Macedonia") # this list removes countries like South Korea that steve did not want to keep as EMEs
headline_cpi_data = read_excel(paste0(data_folder,"Raw/Headline CPI Monthly YoY change_08302023.xlsx"),
col_names = FALSE)
# rep CPI for each column in the dataset for the second column to the number of columns in the dataset
colnames(headline_cpi_data) = c("date",paste0(c(rep("CPI_",29)),headline_cpi_data[2,2:ncol(headline_cpi_data)])) # this dataset contains CPI and policy rate data (we won't really ever use policy rate data from CEIC. The BIS is better)
#colnames(headline_cpi_data) = c("date",paste0(c(rep("CPI_",117)),headline_cpi_data[2,2:ncol(headline_cpi_data)])) # this dataset contains CPI and policy rate data (we won't really ever use policy rate data from CEIC. The BIS is better)
headline_cpi_data = headline_cpi_data[-c(1:27),]
headline_cpi_data = headline_cpi_data %>%
mutate(date=as.Date(as.numeric(date),origin="1899-12-30"))
#Wide to Long
headline_df = reshape2::melt(headline_cpi_data,id.vars="date",measure.vars=colnames(headline_cpi_data)[2:ncol(headline_cpi_data)]) %>%
separate(variable,c("type","country"),sep="_")
headline_df$country = str_replace_all(headline_df$country,setNames(c("South Korea","Russia","Hong Kong"),c("South Korea","Russian Federation","Hong Kong SAR \\(China\\)")))
headline_df = headline_df %>%
mutate(value=as.numeric(value)/100) %>%
group_by(date,type) %>% #for a year and metric
mutate(avg=mean(value,na.rm=TRUE), #calculate the global average for that year and metric
advanced=ifelse(country%in%emes,"Emerging Market Economy","Advanced Economy"), # IMF definition
advanced1 = ifelse(country%in%full_countries,"Emerging Market Economy","Advanced Economy")) # Steve definition
# fix CPI for Australia and New Zealand
df = headline_df %>%
group_by(country,type,quarter(date),year(date)) %>%
mutate(value=ifelse(country%in%c("New Zealand","Australia"),Mode1(value,na.rm=TRUE),value)) %>%
ungroup() %>%
dplyr::select(-c(`quarter(date)`,`year(date)`))
df$country = ifelse(df$country=="European Union","Euro area",df$country)
df$country = ifelse(df$country=="Eurozone","Euro area",df$country)
# bring in BIS data (on central bank policy rates) and replace. the link should contain updated data (you don't have to pull a new file from bls)
bis_daily <- BISdata::fetch_dataset(dest.dir = paste0(data_folder,"Raw/BIS_data_folder/"),
"https://www.bis.org/statistics/full_cbpol_d_csv_row.zip")
install.packages("devtools", repos="https://cran.rstudio.com/")
install.packages("devtools", repos = "https://cran.rstudio.com/")
install.packages("devtools", repos = "https://cran.rstudio.com/")
install.packages("devtools", repos = "https://cran.rstudio.com/")
# set directories
main_dir = "/Users/Victor.J/Downloads/Central Bank Hawkishness/"
data_folder = paste0(main_dir,"Data/")
do_folder = paste0(main_dir,"Do/")
results_folder = paste0(main_dir,"Results/")
charts_folder = paste0(main_dir,"Charts/")
# install and load packages
library(tidyverse)
# set directories
main_dir = "/Users/Victor.J/Downloads/Central Bank Hawkishness/"
data_folder = paste0(main_dir,"Data/")
do_folder = paste0(main_dir,"Do/")
results_folder = paste0(main_dir,"Results/")
charts_folder = paste0(main_dir,"Charts/")
# install and load packages
library(tidyverse)
# set directories
main_dir = "/Users/Victor.J/Downloads/Central Bank Hawkishness/"
data_folder = paste0(main_dir,"Data/")
do_folder = paste0(main_dir,"Do/")
results_folder = paste0(main_dir,"Results/")
charts_folder = paste0(main_dir,"Charts/")
# install and load packages
library(tidyverse)
library(ggplot2)
library(readxl)
library(lubridate) #time and date manipulation
library(ggrepel) # chart labels
library(Rcpp)
library(BISdata) #BIS API KEY
source(paste0(do_folder,"Mode1.R"))
# Get list  of countries needed
countries = c("Brazil","China","Chile","Colombia","Czech Republic","Hungary","Indonesia",
"India","Israel","Korea","Malaysia","Mexico","Philippines","Poland","Romania","South Korea",
"Russia","South Africa","Singapore","Taiwan","Thailand","Turkey","Hong Kong")
full_countries = c("Brazil","China","Chile","Colombia","Czech Republic","Hungary","Indonesia",
"India","Israel","Korea","Malaysia","Mexico","Philippines","Poland","Romania","South Korea",
"Russia","South Africa","Singapore","Taiwan","Thailand","Turkey","Hong Kong","Argentina","Peru","Croatia","Saudi Arabia","Serbia","North Macedonia") # What Steve thinks an EME is
emes = c("Brazil","China","Chile","Colombia","Hungary","Indonesia",
"India","Malaysia","Mexico","Philippines","Poland","Romania",
"Russia","South Africa","Thailand","Turkey","Argentina","Peru","Croatia","Saudi Arabia","Serbia","North Macedonia") # this list removes countries like South Korea that steve did not want to keep as EMEs
# load in inflation
# 4.11.2023 - This is monthly headline inflation from CEIC.
# we used to use a combined interest rate/ headline CPI dataset, but since it had been a while since we did a fresh pull from CEIC
# and we never used the CEIC interest rate data, I did some minor restructuring of the code to take a dataset that contained
# only headline CPI.
headline_cpi_data = read_excel(paste0(data_folder,"Raw/Headline CPI Monthly YoY change_08302023.xlsx"),
col_names = FALSE)
# rep CPI for each column in the dataset for the second column to the number of columns in the dataset
colnames(headline_cpi_data) = c("date",paste0(c(rep("CPI_",29)),headline_cpi_data[2,2:ncol(headline_cpi_data)])) # this dataset contains CPI and policy rate data (we won't really ever use policy rate data from CEIC. The BIS is better)
#colnames(headline_cpi_data) = c("date",paste0(c(rep("CPI_",117)),headline_cpi_data[2,2:ncol(headline_cpi_data)])) # this dataset contains CPI and policy rate data (we won't really ever use policy rate data from CEIC. The BIS is better)
headline_cpi_data = headline_cpi_data[-c(1:27),]
headline_cpi_data = headline_cpi_data %>%
mutate(date=as.Date(as.numeric(date),origin="1899-12-30"))
#Wide to Long
headline_df = reshape2::melt(headline_cpi_data,id.vars="date",measure.vars=colnames(headline_cpi_data)[2:ncol(headline_cpi_data)]) %>%
separate(variable,c("type","country"),sep="_")
#%>%filter(country %in% all_countries)
headline_df$country = str_replace_all(headline_df$country,setNames(c("South Korea","Russia","Hong Kong"),c("South Korea","Russian Federation","Hong Kong SAR \\(China\\)")))
headline_df = headline_df %>%
mutate(value=as.numeric(value)/100) %>%
group_by(date,type) %>% #for a year and metric
mutate(avg=mean(value,na.rm=TRUE), #calculate the global average for that year and metric
advanced=ifelse(country%in%emes,"Emerging Market Economy","Advanced Economy"), # IMF definition
advanced1 = ifelse(country%in%full_countries,"Emerging Market Economy","Advanced Economy")) # Steve definition
# fix CPI for Australia and New Zealand
df = headline_df %>%
group_by(country,type,quarter(date),year(date)) %>%
mutate(value=ifelse(country%in%c("New Zealand","Australia"),Mode1(value,na.rm=TRUE),value)) %>%
ungroup() %>%
dplyr::select(-c(`quarter(date)`,`year(date)`))
df$country = ifelse(df$country=="European Union","Euro area",df$country)
df$country = ifelse(df$country=="Eurozone","Euro area",df$country)
# bring in BIS data (on central bank policy rates) and replace. the link should contain updated data (you don't have to pull a new file from bls)
bis_daily <- BISdata::fetch_dataset(dest.dir = paste0(data_folder,"Raw/BIS_data_folder/"),
url = "https://www.bis.org/statistics/full_cbpol_d_csv_row.zip")
# set directories
main_dir = "/Users/Victor.J/Downloads/Central Bank Hawkishness/"
data_folder = paste0(main_dir,"Data/")
do_folder = paste0(main_dir,"Do/")
results_folder = paste0(main_dir,"Results/")
charts_folder = paste0(main_dir,"Charts/")
# install and load packages
library(tidyverse)
library(ggplot2)
library(readxl)
library(lubridate) #time and date manipulation
library(ggrepel) # chart labels
library(Rcpp)
library(BISdata) #BIS API KEY
source(paste0(do_folder,"Mode1.R"))
# Get list  of countries needed
countries = c("Brazil","China","Chile","Colombia","Czech Republic","Hungary","Indonesia",
"India","Israel","Korea","Malaysia","Mexico","Philippines","Poland","Romania","South Korea",
"Russia","South Africa","Singapore","Taiwan","Thailand","Turkey","Hong Kong")
full_countries = c("Brazil","China","Chile","Colombia","Czech Republic","Hungary","Indonesia",
"India","Israel","Korea","Malaysia","Mexico","Philippines","Poland","Romania","South Korea",
"Russia","South Africa","Singapore","Taiwan","Thailand","Turkey","Hong Kong","Argentina","Peru","Croatia","Saudi Arabia","Serbia","North Macedonia") # What Steve thinks an EME is
emes = c("Brazil","China","Chile","Colombia","Hungary","Indonesia",
"India","Malaysia","Mexico","Philippines","Poland","Romania",
"Russia","South Africa","Thailand","Turkey","Argentina","Peru","Croatia","Saudi Arabia","Serbia","North Macedonia") # this list removes countries like South Korea that steve did not want to keep as EMEs
headline_cpi_data = read_excel(paste0(data_folder,"Raw/Headline CPI Monthly YoY change_08302023.xlsx"),
col_names = FALSE)
# rep CPI for each column in the dataset for the second column to the number of columns in the dataset
colnames(headline_cpi_data) = c("date",paste0(c(rep("CPI_",29)),headline_cpi_data[2,2:ncol(headline_cpi_data)])) # this dataset contains CPI and policy rate data (we won't really ever use policy rate data from CEIC. The BIS is better)
#colnames(headline_cpi_data) = c("date",paste0(c(rep("CPI_",117)),headline_cpi_data[2,2:ncol(headline_cpi_data)])) # this dataset contains CPI and policy rate data (we won't really ever use policy rate data from CEIC. The BIS is better)
headline_cpi_data = headline_cpi_data[-c(1:27),]
headline_cpi_data = headline_cpi_data %>%
mutate(date=as.Date(as.numeric(date),origin="1899-12-30"))
#Wide to Long
headline_df = reshape2::melt(headline_cpi_data,id.vars="date",measure.vars=colnames(headline_cpi_data)[2:ncol(headline_cpi_data)]) %>%
separate(variable,c("type","country"),sep="_")
headline_df$country = str_replace_all(headline_df$country,setNames(c("South Korea","Russia","Hong Kong"),c("South Korea","Russian Federation","Hong Kong SAR \\(China\\)")))
headline_df = headline_df %>%
mutate(value=as.numeric(value)/100) %>%
group_by(date,type) %>% #for a year and metric
mutate(avg=mean(value,na.rm=TRUE), #calculate the global average for that year and metric
advanced=ifelse(country%in%emes,"Emerging Market Economy","Advanced Economy"), # IMF definition
advanced1 = ifelse(country%in%full_countries,"Emerging Market Economy","Advanced Economy")) # Steve definition
# fix CPI for Australia and New Zealand
df = headline_df %>%
group_by(country,type,quarter(date),year(date)) %>%
mutate(value=ifelse(country%in%c("New Zealand","Australia"),Mode1(value,na.rm=TRUE),value)) %>%
ungroup() %>%
dplyr::select(-c(`quarter(date)`,`year(date)`))
df$country = ifelse(df$country=="European Union","Euro area",df$country)
df$country = ifelse(df$country=="Eurozone","Euro area",df$country)
# bring in BIS data (on central bank policy rates) and replace. the link should contain updated data (you don't have to pull a new file from bls)
bis_daily <- BISdata::fetch_dataset(dest.dir = paste0(data_folder,"Raw/BIS_data_folder/"),
"https://www.bis.org/statistics/full_cbpol_d_csv_row.zip")
clear
pwd
pwd()
cwd()
setwd()
wd()
wd
getwd()
setwd("/Users/Victor.J/Desktop/all_codes/krw_data")
krw_data = read.csv('krw_data.csv')
